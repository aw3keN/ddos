# menu.py
import asyncio
import time
import os
import socket
from urllib.parse import urlparse
from pathlib import Path
from typing import Dict, Any, List
from utils import validate_input, logger, generate_report, save_results_to_file, plot_results, load_config_from_file, export_to_json, send_email_results, cleanup_resources, check_network_connectivity, multi_target_test, ramp_up_concurrency, stress_test_duration, is_root, validate_ip, validate_url
from core import run_http_test, run_ping_test, print_results, run_syn_flood, run_udp_flood, run_slowloris, run_dns_amplification, run_ntp_amplification, run_icmp_flood, run_smurf, run_fraggle, run_ping_of_death, run_http_slow_read, run_dns_query_flood, run_ssdp_amplification, run_memcached_amplification

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é
current_results: List[Dict[str, Any]] = []

def display_menu():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    try:
        os.system('cls' if os.name == 'nt' else 'clear')  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        print("\n" + "‚ïê"*70)
        print("              üöÄ DDoS-–¢–ï–°–¢–ï–† v4.0 (–ë–µ–∑ Npcap/Scapy) üöÄ")
        print("              –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏")
        print("‚ïê"*70)
        print("\nüü¢ === –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ ===")
        print("1.  üåê HTTP Flood (GET/POST)")
        print("2.  üì° Ping Flood")
        print("3.  üéØ –¢–µ—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π")
        print("4.  üìà Ramp-up Concurrency")
        print("5.  ‚è±Ô∏è  Stress Test –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("\nüî¥ === FLOOD –ê–¢–ê–ö–ò ===")
        print("6.  üîÑ SYN Flood (Connect-based)")
        print("7.  üì¶ UDP Flood")
        print("8.  üì¨ ICMP Flood (via ping)")
        print("\nüü° === SLOW & AMPLIFICATION ===")
        print("9.  üêå Slowloris")
        print("10. üîç DNS Amplification")
        print("11. ‚è∞ NTP Amplification")
        print("12. üåê HTTP Slow Read")
        print("13. üì° DNS Query Flood")
        print("\nüü£ === BROADCAST –ê–¢–ê–ö–ò ===")
        print("14. üí• Smurf Attack (via ping)")
        print("15. üî• Fraggle Attack")
        print("\n‚ö´ === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ê–¢–ê–ö–ò ===")
        print("16. üíÄ Ping of Death (large ping)")
        print("17. üõ°Ô∏è SSDP Amplification")
        print("18. üíæ Memcached Amplification")
        print("\nüîµ === –û–¢–ß–ï–¢–´ –ò –£–¢–ò–õ–ò–¢–´ ===")
        print("19. üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        print("20. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV")
        print("21. üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
        print("22. üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        print("23. üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email")
        print("24. ‚öôÔ∏è  –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        print("25. üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å")
        print("26. üö™ –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
        return choice
    except KeyboardInterrupt:
        logger.info("–ú–µ–Ω—é –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return "26"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_menu: {e}")
        return "26"

async def handle_menu_choice(choice: str, config: Dict[str, Any]) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏."""
    global current_results
    try:
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        if choice in [str(i) for i in range(1, 19)]:
            confirm = input("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
            if confirm != 'y':
                print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
                logger.info("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        if choice in [str(i) for i in range(1, 19)]:
            if not check_network_connectivity():
                print("‚ùå –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
                logger.error("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True

        if choice == "1":
            target = input("–í–≤–µ–¥–∏—Ç–µ URL: ").strip()
            if not target:
                logger.warning("–ü—É—Å—Ç–æ–π URL")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            url = f"http://{target}" if not target.startswith(("http://", "https://")) else target
            if not validate_url(url):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π URL")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_requests_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_requests = validate_input(num_requests_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            concurrent_str = input("Concurrent: ")
            concurrent = validate_input(concurrent_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π concurrent")
            method_str = input("–ú–µ—Ç–æ–¥ (GET/POST, default GET): ").strip().upper() or 'GET'
            method = method_str
            data_str = None
            if method == 'POST':
                data_str = input("–î–∞–Ω–Ω—ã–µ –¥–ª—è POST (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or '{"test": "data"}'
                data_str = data_str.encode('utf-8') if data_str else None
            if num_requests and concurrent:
                start_time = time.time()
                results = await run_http_test(url, num_requests, concurrent, method=method, data=data_str)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è HTTP —Ç–µ—Å—Ç–∞")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "2":
            target = input("–í–≤–µ–¥–∏—Ç–µ IP: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π IP")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_requests_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_requests = validate_input(num_requests_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            concurrent_str = input("Concurrent: ")
            concurrent = validate_input(concurrent_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π concurrent")
            if num_requests and concurrent:
                start_time = time.time()
                results = run_ping_test(target, num_requests, concurrent)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Ping —Ç–µ—Å—Ç–∞")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "3":
            targets_str = input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
            if not targets_str:
                logger.warning("–ü—É—Å—Ç—ã–µ —Ü–µ–ª–∏")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            targets = [t.strip() for t in targets_str.split(',') if t.strip()]
            valid_targets = []
            for t in targets:
                if validate_url(t) or validate_ip(t):
                    valid_targets.append(t)
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å: {t}")
            if not valid_targets:
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            targets = valid_targets
            method = input("–ú–µ—Ç–æ–¥ (1-HTTP, 2-Ping): ").strip()
            if method not in ["1", "2"]:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_requests_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ")
            num_requests = validate_input(num_requests_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            concurrent_str = input("Concurrent: ")
            concurrent = validate_input(concurrent_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π concurrent")
            if num_requests and concurrent and targets:
                results = multi_target_test(targets, method, num_requests, concurrent)
                current_results = results
                print_results(results)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è multi-target")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "4":
            url = input("URL: ").strip()
            url = f"http://{url}" if not url.startswith(("http://", "https://")) else url
            if not validate_url(url):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            start_con_str = input("Start concurrent: ")
            start_con = validate_input(start_con_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π start concurrent")
            end_con_str = input("End concurrent: ")
            end_con = validate_input(end_con_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π end concurrent")
            if start_con >= end_con:
                print("‚ùå Start concurrent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ End.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            steps_str = input("Steps: ")
            steps = validate_input(steps_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–µ steps")
            num_requests_str = input("Requests per step: ")
            num_requests = validate_input(num_requests_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —à–∞–≥")
            if all([url, start_con, end_con, steps, num_requests]):
                results = ramp_up_concurrency(start_con, end_con, steps, url, num_requests)
                current_results = results
                print_results(results)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ramp-up")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "5":
            url = input("URL: ").strip()
            url = f"http://{url}" if not url.startswith(("http://", "https://")) else url
            if not validate_url(url):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            duration_str = input("Duration (sec): ")
            duration = validate_input(duration_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            concurrent_str = input("Concurrent: ")
            concurrent = validate_input(concurrent_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π concurrent")
            if duration and concurrent and url:
                requests_made = stress_test_duration(url, duration, concurrent)
                print(f"üìä –°–¥–µ–ª–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_made}")
                current_results = [{"requests_made": requests_made}]
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è stress test")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "6":  # SYN Flood (Connect-based, –±–µ–∑ Scapy)
            target = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è SYN Flood: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            port_str = input("–ü–æ—Ä—Ç (default 80): ") or "80"
            port = validate_input(port_str, int, min_val=1, max_val=65535, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç")
            if num_packets and port:
                start_time = time.time()
                results = run_syn_flood(target, num_packets, port)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SYN Flood")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "7":  # UDP Flood
            target = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è UDP Flood: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            port_str = input("–ü–æ—Ä—Ç: ")
            port = validate_input(port_str, int, min_val=1, max_val=65535, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç (1-65535)")
            if num_packets and port:
                start_time = time.time()
                results = run_udp_flood(target, num_packets, port)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è UDP Flood")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "8":  # ICMP Flood (via ping)
            target = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è ICMP Flood: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            if num_packets:
                start_time = time.time()
                results = run_icmp_flood(target, num_packets)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ICMP Flood")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "9":  # Slowloris
            target = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è Slowloris: ").strip()
            url = f"http://{target}" if not target.startswith(("http://", "https://")) else target
            if not validate_url(url):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            duration_str = input("Duration (sec): ")
            duration = validate_input(duration_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            if duration:
                start_time = time.time()
                results = await run_slowloris(url, duration)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Slowloris")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "10":  # DNS Amp
            target = input("–í–≤–µ–¥–∏—Ç–µ DNS —Å–µ—Ä–≤–µ—Ä –¥–ª—è Amplification: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_queries_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_queries = validate_input(num_queries_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            if num_queries:
                start_time = time.time()
                results = run_dns_amplification(target, num_queries)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è DNS Amplification")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "11":  # NTP Amp
            target = input("–í–≤–µ–¥–∏—Ç–µ NTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Amplification: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_queries_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_queries = validate_input(num_queries_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            if num_queries:
                start_time = time.time()
                results = run_ntp_amplification(target, num_queries)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è NTP Amplification")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "12":  # HTTP Slow Read
            target = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è HTTP Slow Read: ").strip()
            url = f"http://{target}" if not target.startswith(("http://", "https://")) else target
            if not validate_url(url):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            duration_str = input("Duration (sec): ")
            duration = validate_input(duration_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            concurrent_str = input("Concurrent: ")
            concurrent = validate_input(concurrent_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π concurrent")
            if duration and concurrent:
                start_time = time.time()
                results = await run_http_slow_read(url, duration, concurrent)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è HTTP Slow Read")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "13":  # DNS Query Flood
            target = input("–í–≤–µ–¥–∏—Ç–µ DNS —Å–µ—Ä–≤–µ—Ä –¥–ª—è Query Flood: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_queries_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_queries = validate_input(num_queries_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            if num_queries:
                start_time = time.time()
                results = run_dns_query_flood(target, num_queries)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è DNS Query Flood")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "14":  # Smurf (via ping)
            victim = input("Victim IP: ").strip()
            if not validate_ip(victim):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Victim IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            broadcast = input("Broadcast IP: ").strip()
            if not validate_ip(broadcast):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Broadcast IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            if num_packets:
                start_time = time.time()
                results = run_smurf(victim, broadcast, num_packets)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Smurf")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "15":  # Fraggle
            broadcast = input("Broadcast IP: ").strip()
            if not validate_ip(broadcast):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Broadcast IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            port_str = input("–ü–æ—Ä—Ç: ")
            port = validate_input(port_str, int, min_val=1, max_val=65535, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç")
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            if num_packets and port:
                start_time = time.time()
                results = run_fraggle(broadcast, port, num_packets)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Fraggle")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "16":  # Ping of Death
            target = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è Ping of Death: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_packets_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ")
            num_packets = validate_input(num_packets_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤")
            if num_packets:
                start_time = time.time()
                results = run_ping_of_death(target, num_packets)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Ping of Death")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "17":  # SSDP Amplification
            target = input("–í–≤–µ–¥–∏—Ç–µ SSDP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Amplification: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_queries_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_queries = validate_input(num_queries_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            if num_queries:
                start_time = time.time()
                results = run_ssdp_amplification(target, num_queries)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SSDP Amplification")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "18":  # Memcached Amplification
            target = input("–í–≤–µ–¥–∏—Ç–µ Memcached —Å–µ—Ä–≤–µ—Ä –¥–ª—è Amplification: ").strip()
            if not target or not validate_ip(target):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            num_queries_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ")
            num_queries = validate_input(num_queries_str, int, error_msg="–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            if num_queries:
                start_time = time.time()
                results = run_memcached_amplification(target, num_queries)
                current_results = results
                print_results(results)
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Memcached Amplification")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
        elif choice == "19":
            if current_results:
                report = generate_report(current_results)
                print(report)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "20":
            if current_results:
                success = save_results_to_file(current_results)
                if not success:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                else:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "21":
            if current_results:
                success = export_to_json(current_results)
                if not success:
                    print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                else:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "22":
            if current_results:
                plot_results(current_results)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "23":
            email = input("–í–≤–µ–¥–∏—Ç–µ email: ").strip()
            if not email:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            if email and current_results:
                success = send_email_results(current_results, email)
                if not success:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                else:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "24":
            config_file = input("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ (default config.json): ").strip() or "config.json"
            config = load_config_from_file(config_file)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "25":
            if check_network_connectivity():
                print("‚úÖ –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞.")
            else:
                print("‚ùå –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == "26":
            return False
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return True
    except KeyboardInterrupt:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_choice: {e}")
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return True

async def run_menu():
    """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–µ–Ω—é."""
    config = {}
    while True:
        choice = display_menu()
        if not await handle_menu_choice(choice, config):
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            cleanup_resources()
            break