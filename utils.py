# utils.py
import os
import csv
import json
import time
import logging
import socket
from datetime import datetime
from typing import List, Dict, Any, Optional
import sys
from pathlib import Path
from urllib.parse import urlparse
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–ø–∫—É logs
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)
log_file = log_dir / f"ddos_tester_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ scapy)."""
    required_modules = [
        'asyncio',
        'aiohttp',
        'ping3',
        'concurrent.futures',
        'tqdm',
        'matplotlib'
    ]
    missing = []
    for module in required_modules:
        try:
            __import__(module)
        except ImportError as e:
            missing.append(module)
            logger.warning(f"–ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é pip install {' '.join(missing)}.")
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}")
        sys.exit(1)
    logger.info("–í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

def show_loading_screen():
    """–ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    try:
        print("\n" + "‚ïê"*50)
        print("          üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DDoS-–¢–ï–°–¢–ï–† v4.0... üöÄ")
        print("‚ïê"*50)
        for i in range(11):
            bar = "‚ñà" * i + "‚ñë" * (10 - i)
            progress = f"[{bar}] {i*10}%"
            print(f"\r{progress}", end='', flush=True)
            time.sleep(0.15)
        print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫ –º–µ–Ω—é...\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def validate_input(value: str, type_check: callable, min_val: int = 0, max_val: Optional[int] = None, error_msg: str = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.") -> Optional[Any]:
    """–£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        val = type_check(value.strip())
        if val < min_val:
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= {min_val}.")
        if max_val and val > max_val:
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <= {max_val}.")
        return val
    except ValueError as e:
        logger.warning(f"{error_msg}: {e}")
        print(f"‚ùå {error_msg} {e}")
        return None

def validate_ip(ip_str: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞."""
    try:
        socket.inet_aton(ip_str)
        return True
    except socket.error:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π IP: {ip_str}")
        return False

def validate_url(url: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è URL."""
    parsed = urlparse(url)
    is_valid = bool(parsed.scheme in ['http', 'https'] and parsed.netloc)
    if not is_valid:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π URL: {url}")
    return is_valid

def is_root() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π."""
    try:
        return os.getuid() == 0
    except AttributeError:
        # Windows
        return True  # –ù–µ—Ç —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

def save_results_to_file(results: List[Dict[str, Any]], filename: Optional[str] = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV-—Ñ–∞–π–ª."""
    try:
        if not results:
            logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return False
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ddos_test_results_{timestamp}.csv"
        Path(filename).parent.mkdir(parents=True, exist_ok=True)
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            fieldnames = set().union(*(r.keys() for r in results))
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(results)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
        return True
    except (IOError, OSError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False

def load_config_from_file(filename: str = "config.json") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        if not os.path.exists(filename):
            logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
            return {}
        with open(filename, 'r', encoding='utf-8') as f:
            config = json.load(f)
            if 'max_requests' in config and not isinstance(config['max_requests'], int):
                del config['max_requests']
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ñ–∏–≥–µ: max_requests")
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filename}")
            return config
    except (json.JSONDecodeError, IOError, OSError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

def generate_report(results: List[Dict[str, Any]]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    try:
        if not results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞."
        total = len(results)
        successful = sum(1 for r in results if r.get("status") in [200, "success", "sent", "held", "amplified", "held_timeout", "slow_read"])
        failed = total - successful
        times = [r["time"] for r in results if r["time"] is not None and r["time"] > 0]
        avg_time = sum(times) / len(times) if times else 0
        total_size = sum(r.get("size", 0) for r in results)
        amps = [r.get("amp", 0) for r in results if r.get("amp")]
        avg_amp = sum(amps) / len(amps) if amps else 0
        report = f"""üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç—É:
–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}
–£—Å–ø–µ—à–Ω—ã—Ö: {successful}
–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {failed}
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f} —Å–µ–∫
–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {total_size / 1024:.2f} KB
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ): {avg_amp:.2f}x

–û—à–∏–±–∫–∏: {failed}
"""
        if failed > 0:
            report += "\n–ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:\n"
            errors = [r.get("error", "") for r in results if r.get("error")]
            report += "\n".join(errors[:3])
        logger.info("–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."

def plot_results(results: List[Dict[str, Any]]):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å matplotlib –≤ –ø–∞–ø–∫—É images."""
    try:
        if not results:
            logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        import matplotlib.pyplot as plt
        import numpy as np
        times = np.array([r["time"] for r in results if r["time"] is not None])
        indices = np.arange(len(times))
        statuses = [r.get("status", "unknown") for r in results if r["time"] is not None]
        plt.figure(figsize=(12, 6))
        colors = {'success': 'green', 'sent': 'blue', 'held': 'orange', 'amplified': 'red', 'timeout': 'gray', 'slow_read': 'purple'}
        for status, color in colors.items():
            mask = np.array([s == status for s in statuses])
            if np.any(mask):
                plt.scatter(indices[mask], times[mask], c=color, label=status, alpha=0.6)
        plt.xlabel('–ó–∞–ø—Ä–æ—Å')
        plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫)')
        plt.title('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º')
        plt.legend()
        plt.grid(True, alpha=0.3)
        img_dir = Path("images")
        img_dir.mkdir(exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = img_dir / f"test_plot_{timestamp}.png"
        plt.savefig(filename, dpi=150, bbox_inches='tight')
        plt.show()
        logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}")
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except ImportError:
        logger.error("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        print("‚ùå Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def send_email_results(results: List[Dict[str, Any]], email: str) -> bool:
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ email (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ smtplib)."""
    try:
        report = generate_report(results)
        print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {email} (—Å–∏–º—É–ª—è—Ü–∏—è).\n{report[:200]}...")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {email} (—Å–∏–º—É–ª—è—Ü–∏—è)")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False

def multi_target_test(targets: List[str], method: str, num_requests: int, concurrent: int) -> List[Dict[str, Any]]:
    """–¢–µ—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π."""
    all_results = []
    try:
        from core import run_http_test, run_ping_test
        for target in targets:
            if not target.strip():
                continue
            print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: {target.strip()}")
            if method == "1":
                url = f"http://{target.strip()}" if not target.strip().startswith(("http://", "https://")) else target.strip()
                results = asyncio.run(run_http_test(url, num_requests, concurrent))
            else:
                if not validate_ip(target.strip()):
                    print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ IP: {target}")
                    continue
                results = run_ping_test(target.strip(), num_requests, concurrent)
            all_results.extend(results)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ multi_target_test: {e}")
    return all_results

def ramp_up_concurrency(start_concurrent: int, end_concurrent: int, steps: int, url: str, num_requests: int) -> List[Dict[str, Any]]:
    """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ concurrency."""
    results = []
    try:
        from core import run_http_test
        if start_concurrent >= end_concurrent:
            raise ValueError("Start concurrent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ end concurrent.")
        step_size = max(1, (end_concurrent - start_concurrent) // steps)
        for i in range(steps + 1):
            current_con = start_concurrent + i * step_size
            if current_con > end_concurrent:
                current_con = end_concurrent
            print(f"üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å concurrency: {current_con}")
            step_results = asyncio.run(run_http_test(url, num_requests, current_con))
            results.extend(step_results)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ ramp_up_concurrency: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ramp_up_concurrency: {e}")
    return results

def stress_test_duration(url: str, duration: int, concurrent: int) -> int:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    requests_made = 0
    try:
        start_time = time.time()
        from core import run_http_test
        while time.time() - start_time < duration:
            batch_size = min(10, concurrent)  # –ë–∞—Ç—á–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            batch_results = asyncio.run(run_http_test(url, batch_size, concurrent))
            requests_made += len([r for r in batch_results if r.get("status")])
            logger.debug(f"–ë–∞—Ç—á {requests_made} –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            time.sleep(0.1)  # –ü–æ—Å–∫–æ–ª—å–∫—É —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stress_test_duration: {e}")
    return requests_made

def cleanup_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
    try:
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        import gc
        gc.collect()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

def export_to_json(results: List[Dict[str, Any]], filename: Optional[str] = None) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON."""
    try:
        if not results:
            logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return False
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if not filename:
            filename = f"ddos_test_results_{timestamp}.json"
        Path(filename).parent.mkdir(parents=True, exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=4, ensure_ascii=False, default=str)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {filename}")
        return True
    except (IOError, OSError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return False

def check_network_connectivity(host: str = "8.8.8.8", port: int = 53, timeout: int = 3) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏."""
    try:
        original_timeout = socket.getdefaulttimeout()
        socket.setdefaulttimeout(timeout)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((host, port)) == 0
        sock.close()
        socket.setdefaulttimeout(original_timeout)
        return result
    except OSError:
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏: {e}")
        return False